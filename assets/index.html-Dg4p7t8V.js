import{_ as s,c as n,a as i,o as e}from"./app-BVMcoHqx.js";const l={};function r(p,a){return e(),n("div",null,a[0]||(a[0]=[i(`<h2 id="什么是蓝图" tabindex="-1"><a class="header-anchor" href="#什么是蓝图"><span>什么是蓝图？</span></a></h2><p>蓝图（Blueprint）是虚幻引擎的可视化脚本系统，允许开发者使用基于节点的界面创建游戏玩法，而无需编写传统的代码。蓝图系统功能强大，几乎可以实现C++能完成的所有功能。</p><h3 id="蓝图的优势" tabindex="-1"><a class="header-anchor" href="#蓝图的优势"><span>蓝图的优势</span></a></h3><ul><li><strong>可视化编程</strong>：直观的节点连接方式，便于理解逻辑流程</li><li><strong>快速原型</strong>：可以快速搭建和测试游戏玩法</li><li><strong>实时调试</strong>：支持断点调试和实时变量监控</li><li><strong>团队协作</strong>：非程序员也能参与逻辑开发</li><li><strong>热更新</strong>：运行时可以修改蓝图逻辑</li></ul><h2 id="蓝图类型" tabindex="-1"><a class="header-anchor" href="#蓝图类型"><span>蓝图类型</span></a></h2><h3 id="_1-关卡蓝图-level-blueprint" tabindex="-1"><a class="header-anchor" href="#_1-关卡蓝图-level-blueprint"><span>1. 关卡蓝图（Level Blueprint）</span></a></h3><ul><li>控制特定关卡的逻辑</li><li>处理关卡事件（开始游戏、玩家进入区域等）</li><li>一般用于关卡特有的功能</li></ul><h3 id="_2-类蓝图-class-blueprint" tabindex="-1"><a class="header-anchor" href="#_2-类蓝图-class-blueprint"><span>2. 类蓝图（Class Blueprint）</span></a></h3><ul><li>基于Actor类创建的蓝图</li><li>可以创建可重复使用的对象</li><li>包含组件、变量、函数和事件</li></ul><h3 id="_3-数据资产蓝图-data-asset-blueprint" tabindex="-1"><a class="header-anchor" href="#_3-数据资产蓝图-data-asset-blueprint"><span>3. 数据资产蓝图（Data Asset Blueprint）</span></a></h3><ul><li>用于存储和管理数据</li><li>不包含可执行逻辑</li><li>适合配置文件和设置</li></ul><h3 id="_4-函数库蓝图-function-library-blueprint" tabindex="-1"><a class="header-anchor" href="#_4-函数库蓝图-function-library-blueprint"><span>4. 函数库蓝图（Function Library Blueprint）</span></a></h3><ul><li>包含可在其他蓝图中调用的函数</li><li>用于创建可重用的功能</li><li>类似于编程中的工具类</li></ul><h3 id="_5-接口蓝图-interface-blueprint" tabindex="-1"><a class="header-anchor" href="#_5-接口蓝图-interface-blueprint"><span>5. 接口蓝图（Interface Blueprint）</span></a></h3><ul><li>定义函数签名的合约</li><li>允许不同类的蓝图实现相同的接口</li><li>实现多态性</li></ul><h3 id="_6-宏库蓝图-macro-library-blueprint" tabindex="-1"><a class="header-anchor" href="#_6-宏库蓝图-macro-library-blueprint"><span>6. 宏库蓝图（Macro Library Blueprint）</span></a></h3><ul><li>包含可重用的节点组合</li><li>比函数更灵活，可以有多个执行输出</li></ul><h2 id="蓝图编辑器界面" tabindex="-1"><a class="header-anchor" href="#蓝图编辑器界面"><span>蓝图编辑器界面</span></a></h2><h3 id="主要组件" tabindex="-1"><a class="header-anchor" href="#主要组件"><span>主要组件</span></a></h3><ol><li><p><strong>工具栏（Toolbar）</strong></p><ul><li>编译、保存、查找等常用功能</li><li>调试控制按钮</li></ul></li><li><p><strong>视口（Viewport）</strong>（仅类蓝图）</p><ul><li>3D预览窗口</li><li>可以查看和调整组件</li></ul></li><li><p><strong>组件（Components）</strong>（仅类蓝图）</p><ul><li>显示蓝图的组件层级</li><li>可以添加、删除、重排组件</li></ul></li><li><p><strong>我的蓝图（My Blueprint）</strong></p><ul><li>显示蓝图的所有元素</li><li>变量、函数、事件、宏等</li></ul></li><li><p><strong>图表（Graph）</strong></p><ul><li>主要的节点编辑区域</li><li>可以有多个图表（事件图表、函数图表等）</li></ul></li><li><p><strong>细节（Details）</strong></p><ul><li>显示选中节点或组件的属性</li><li>可以设置默认值和配置</li></ul></li></ol><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><h3 id="节点-nodes" tabindex="-1"><a class="header-anchor" href="#节点-nodes"><span>节点（Nodes）</span></a></h3><p><strong>事件节点（Event Nodes）</strong></p><ul><li>响应特定事件的起始点</li><li>常见事件：BeginPlay、Tick、碰撞事件等</li><li>红色的执行输出引脚</li></ul><p><strong>函数节点（Function Nodes）</strong></p><ul><li>执行特定功能的节点</li><li>可以有输入和输出参数</li><li>蓝色表示对象引用，其他颜色表示不同数据类型</li></ul><p><strong>变量节点（Variable Nodes）</strong></p><ul><li>Get：获取变量值</li><li>Set：设置变量值</li><li>变量类型用不同颜色表示</li></ul><h3 id="引脚-pins" tabindex="-1"><a class="header-anchor" href="#引脚-pins"><span>引脚（Pins）</span></a></h3><p><strong>执行引脚（Execution Pins）</strong></p><ul><li>白色的执行流引脚</li><li>控制代码执行顺序</li><li>从左到右：输入执行、输出执行</li></ul><p><strong>数据引脚（Data Pins）</strong></p><ul><li>传递数据值</li><li>不同颜色代表不同数据类型</li><li>布尔值（红色）、整数（青色）、浮点数（绿色）、字符串（洋红色）、对象引用（蓝色）</li></ul><h3 id="连线-wires" tabindex="-1"><a class="header-anchor" href="#连线-wires"><span>连线（Wires）</span></a></h3><ul><li>连接节点之间的引脚</li><li>执行连线：控制执行流程</li><li>数据连线：传递数据值</li><li>可以拖拽重新连接</li></ul><h2 id="变量系统" tabindex="-1"><a class="header-anchor" href="#变量系统"><span>变量系统</span></a></h2><h3 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型"><span>变量类型</span></a></h3><p><strong>基本数据类型</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- Boolean（布尔值）</span></span>
<span class="line"><span>- Integer（整数）</span></span>
<span class="line"><span>- Float（浮点数）</span></span>
<span class="line"><span>- String（字符串）</span></span>
<span class="line"><span>- Name（名称）</span></span>
<span class="line"><span>- Text（文本）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>复合数据类型</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- Vector（向量）</span></span>
<span class="line"><span>- Rotator（旋转器）</span></span>
<span class="line"><span>- Transform（变换）</span></span>
<span class="line"><span>- Color（颜色）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>对象类型</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- Object Reference（对象引用）</span></span>
<span class="line"><span>- Class Reference（类引用）</span></span>
<span class="line"><span>- Soft Object Reference（软引用）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>集合类型</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- Array（数组）</span></span>
<span class="line"><span>- Set（集合）</span></span>
<span class="line"><span>- Map（映射）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="变量属性" tabindex="-1"><a class="header-anchor" href="#变量属性"><span>变量属性</span></a></h3><p><strong>实例可编辑（Instance Editable）</strong></p><ul><li>在细节面板中可以编辑</li><li>每个实例可以有不同的值</li></ul><p><strong>蓝图只读（Blueprint Read Only）</strong></p><ul><li>在蓝图中只能读取，不能修改</li></ul><p><strong>公开到电影序列（Expose to Cinematics）</strong></p><ul><li>可以在Sequencer中进行动画</li></ul><p><strong>私有（Private）</strong></p><ul><li>只能在当前蓝图中访问</li></ul><h2 id="函数和事件" tabindex="-1"><a class="header-anchor" href="#函数和事件"><span>函数和事件</span></a></h2><h3 id="函数-functions" tabindex="-1"><a class="header-anchor" href="#函数-functions"><span>函数（Functions）</span></a></h3><p><strong>创建函数</strong></p><ol><li>在&quot;我的蓝图&quot;面板中点击&quot;+&quot;按钮</li><li>选择&quot;函数&quot;</li><li>设置函数名称和参数</li></ol><p><strong>函数特点</strong></p><ul><li>有明确的输入和输出</li><li>可以有返回值</li><li>支持局部变量</li><li>可以被其他蓝图调用</li></ul><h3 id="事件-events" tabindex="-1"><a class="header-anchor" href="#事件-events"><span>事件（Events）</span></a></h3><p><strong>自定义事件</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- 可以从其他地方调用</span></span>
<span class="line"><span>- 支持参数传递</span></span>
<span class="line"><span>- 用于解耦代码逻辑</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>内置事件</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- BeginPlay：对象开始时触发</span></span>
<span class="line"><span>- Tick：每帧都会触发</span></span>
<span class="line"><span>- EndPlay：对象结束时触发</span></span>
<span class="line"><span>- 碰撞事件：OnHit、OnOverlap等</span></span>
<span class="line"><span>- 输入事件：键盘、鼠标、手柄输入</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="实践教程-创建简单的交互对象" tabindex="-1"><a class="header-anchor" href="#实践教程-创建简单的交互对象"><span>实践教程：创建简单的交互对象</span></a></h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h3><p>创建一个可以点击的宝箱，点击后播放动画并给玩家物品。</p><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h3><h4 id="_1-创建蓝图类" tabindex="-1"><a class="header-anchor" href="#_1-创建蓝图类"><span>1. 创建蓝图类</span></a></h4><ol><li>在内容浏览器中右键</li><li>选择&quot;蓝图类&quot;</li><li>选择&quot;Actor&quot;作为父类</li><li>命名为&quot;BP_InteractiveChest&quot;</li></ol><h4 id="_2-添加组件" tabindex="-1"><a class="header-anchor" href="#_2-添加组件"><span>2. 添加组件</span></a></h4><ol><li>添加&quot;Static Mesh&quot;组件作为宝箱模型</li><li>添加&quot;Box Collision&quot;组件作为碰撞检测</li><li>设置碰撞组件大小包围宝箱</li></ol><h4 id="_3-创建变量" tabindex="-1"><a class="header-anchor" href="#_3-创建变量"><span>3. 创建变量</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- bIsOpened (Boolean) - 宝箱是否已开启</span></span>
<span class="line"><span>- ItemName (String) - 物品名称</span></span>
<span class="line"><span>- ItemCount (Integer) - 物品数量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-实现交互逻辑" tabindex="-1"><a class="header-anchor" href="#_4-实现交互逻辑"><span>4. 实现交互逻辑</span></a></h4><p><strong>添加事件</strong></p><ol><li>在碰撞组件上添加&quot;OnComponentBeginOverlap&quot;事件</li><li>检查重叠的Actor是否为玩家</li><li>显示交互提示</li></ol><p><strong>添加输入事件</strong></p><ol><li>添加&quot;E&quot;键输入事件</li><li>检查玩家是否在交互范围内</li><li>检查宝箱是否已经开启</li></ol><p><strong>开启宝箱逻辑</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>1. 设置bIsOpened为True</span></span>
<span class="line"><span>2. 播放开启动画</span></span>
<span class="line"><span>3. 播放音效</span></span>
<span class="line"><span>4. 给玩家添加物品</span></span>
<span class="line"><span>5. 隐藏交互提示</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_5-蓝图节点示例" tabindex="-1"><a class="header-anchor" href="#_5-蓝图节点示例"><span>5. 蓝图节点示例</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Event BeginPlay</span></span>
<span class="line"><span>    └── Set bIsOpened (False)</span></span>
<span class="line"><span>    └── Set ItemName (&quot;金币&quot;)</span></span>
<span class="line"><span>    └── Set ItemCount (100)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>OnComponentBeginOverlap</span></span>
<span class="line"><span>    └── Branch (Other Actor == Player?)</span></span>
<span class="line"><span>        ├── True: Show Interaction UI</span></span>
<span class="line"><span>        └── False: (Do Nothing)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Input Action E</span></span>
<span class="line"><span>    └── Branch (Player in Range?)</span></span>
<span class="line"><span>        ├── True:</span></span>
<span class="line"><span>        │   └── Branch (Not bIsOpened?)</span></span>
<span class="line"><span>        │       ├── True:</span></span>
<span class="line"><span>        │       │   ├── Set bIsOpened (True)</span></span>
<span class="line"><span>        │       │   ├── Play Animation</span></span>
<span class="line"><span>        │       │   ├── Play Sound</span></span>
<span class="line"><span>        │       │   └── Give Item to Player</span></span>
<span class="line"><span>        │       └── False: Print &quot;Already Opened&quot;</span></span>
<span class="line"><span>        └── False: (Do Nothing)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="调试技巧" tabindex="-1"><a class="header-anchor" href="#调试技巧"><span>调试技巧</span></a></h2><h3 id="断点调试" tabindex="-1"><a class="header-anchor" href="#断点调试"><span>断点调试</span></a></h3><ol><li>在节点上右键选择&quot;添加断点&quot;</li><li>运行游戏时会暂停在断点处</li><li>可以查看变量值和执行流程</li></ol><h3 id="打印调试" tabindex="-1"><a class="header-anchor" href="#打印调试"><span>打印调试</span></a></h3><ul><li>使用&quot;Print String&quot;节点输出调试信息</li><li>可以显示在屏幕上或输出日志</li></ul><h3 id="变量监视" tabindex="-1"><a class="header-anchor" href="#变量监视"><span>变量监视</span></a></h3><ul><li>在&quot;我的蓝图&quot;面板中可以监视变量值</li><li>运行时实时显示变量变化</li></ul><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h2><h3 id="事件图表优化" tabindex="-1"><a class="header-anchor" href="#事件图表优化"><span>事件图表优化</span></a></h3><ul><li>避免在Tick事件中进行重复计算</li><li>使用定时器代替频繁的Tick检查</li><li>合理使用事件分发器</li></ul><h3 id="变量优化" tabindex="-1"><a class="header-anchor" href="#变量优化"><span>变量优化</span></a></h3><ul><li>选择合适的数据类型</li><li>避免不必要的类型转换</li><li>使用对象池减少创建销毁开销</li></ul><h3 id="蓝图编译优化" tabindex="-1"><a class="header-anchor" href="#蓝图编译优化"><span>蓝图编译优化</span></a></h3><ul><li>避免循环引用</li><li>减少蓝图之间的强依赖</li><li>使用接口提高解耦性</li></ul><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><h3 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范"><span>命名规范</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- 蓝图类：BP_ClassName</span></span>
<span class="line"><span>- 变量：bIsActive, PlayerHealth, CurrentLevel</span></span>
<span class="line"><span>- 函数：GetPlayerHealth, SetWeaponDamage</span></span>
<span class="line"><span>- 事件：OnPlayerDeath, OnLevelComplete</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="代码组织" tabindex="-1"><a class="header-anchor" href="#代码组织"><span>代码组织</span></a></h3><ul><li>使用注释节点说明复杂逻辑</li><li>将功能拆分成小函数</li><li>使用折叠图表整理相关节点</li><li>保持图表整洁，避免连线交叉</li></ul><h3 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计"><span>架构设计</span></a></h3><ul><li>使用组件化思想设计蓝图</li><li>通过接口实现不同类的通信</li><li>使用事件分发器解耦系统</li><li>合理使用继承关系</li></ul><h2 id="进阶主题" tabindex="-1"><a class="header-anchor" href="#进阶主题"><span>进阶主题</span></a></h2><h3 id="蓝图通信" tabindex="-1"><a class="header-anchor" href="#蓝图通信"><span>蓝图通信</span></a></h3><ol><li><strong>直接引用</strong>：直接调用其他蓝图的函数</li><li><strong>类型转换</strong>：将通用类型转换为特定类型</li><li><strong>接口</strong>：定义通用的函数签名</li><li><strong>事件分发器</strong>：广播事件给多个监听者</li><li><strong>蓝图函数库</strong>：创建全局可用的工具函数</li></ol><h3 id="数据驱动设计" tabindex="-1"><a class="header-anchor" href="#数据驱动设计"><span>数据驱动设计</span></a></h3><ul><li>使用数据表格存储配置数据</li><li>创建数据资产蓝图</li><li>使用结构体组织复杂数据</li><li>实现可配置的游戏机制</li></ul><h3 id="与c-集成" tabindex="-1"><a class="header-anchor" href="#与c-集成"><span>与C++集成</span></a></h3><ul><li>在C++中暴露函数给蓝图</li><li>创建可以在蓝图中继承的C++类</li><li>使用蓝图可调用函数（UFUNCTION）</li><li>理解蓝图编译过程</li></ul><hr><p><strong>总结</strong>：蓝图系统是虚幻引擎的核心特性之一，掌握蓝图可以让你快速实现游戏功能。从简单的交互开始，逐步学习复杂的系统设计，多实践是掌握蓝图的关键。</p>`,114)]))}const h=s(l,[["render",r]]),d=JSON.parse('{"path":"/ue/e1wluilw/","title":"蓝图","lang":"zh-CN","frontmatter":{"title":"蓝图","createTime":"2025/06/03 01:01:42","permalink":"/ue/e1wluilw/"},"readingTime":{"minutes":6.84,"words":2051},"git":{"createdTime":1748885071000,"updatedTime":1748885071000,"contributors":[{"name":"kirineko","username":"kirineko","email":"kirineko@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kirineko?v=4","url":"https://github.com/kirineko"}]},"filePathRelative":"notes/ue/蓝图.md","headers":[]}');export{h as comp,d as data};
