import{_ as t,c as r,a as l,o as n}from"./app-BVMcoHqx.js";const s={};function i(e,a){return n(),r("div",null,a[0]||(a[0]=[l(`<blockquote><p>基于官方文档整理的通俗易懂的 UE 核心概念解释</p></blockquote><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li><a href="#%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E6%A6%82%E5%BF%B5">基础架构概念</a></li><li><a href="#%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A6%82%E5%BF%B5">项目管理概念</a></li><li><a href="#%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E6%A6%82%E5%BF%B5">游戏对象概念</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E6%A6%82%E5%BF%B5">控制器概念</a></li><li><a href="#%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E6%A6%82%E5%BF%B5">游戏框架概念</a></li><li><a href="#%E5%87%A0%E4%BD%95%E4%BD%93%E6%A6%82%E5%BF%B5">几何体概念</a></li><li><a href="#%E4%B8%96%E7%95%8C%E5%92%8C%E5%85%B3%E5%8D%A1%E6%A6%82%E5%BF%B5">世界和关卡概念</a></li></ul><hr><h2 id="基础架构概念" tabindex="-1"><a class="header-anchor" href="#基础架构概念"><span>基础架构概念</span></a></h2><h3 id="对象-object" tabindex="-1"><a class="header-anchor" href="#对象-object"><span>对象 (Object)</span></a></h3><p><strong>简单理解：</strong> 虚幻引擎的基础砖块</p><p>就像搭积木一样，对象是构建游戏的基础组件。几乎所有的游戏元素都是从对象发展而来的。</p><p><strong>技术细节：</strong></p><ul><li>在 C++中对应 <code>UObject</code> 类</li><li>提供垃圾回收、元数据支持、序列化等基础功能</li><li>所有其他类型都继承自对象</li></ul><h3 id="类-class" tabindex="-1"><a class="header-anchor" href="#类-class"><span>类 (Class)</span></a></h3><p><strong>简单理解：</strong> 物品的设计图纸</p><p>类就像是一张设计图纸，定义了某种游戏元素应该有什么特性和行为。比如&quot;汽车&quot;这个类定义了所有汽车都有轮子、引擎等。</p><p><strong>重要特点：</strong></p><ul><li>分层结构：子类会继承父类的所有特性</li><li>可以用 C++代码或蓝图创建</li><li>例如：车辆类 → 汽车类 → 跑车类</li></ul><h3 id="蓝图-blueprint" tabindex="-1"><a class="header-anchor" href="#蓝图-blueprint"><span>蓝图 (Blueprint)</span></a></h3><p><strong>简单理解：</strong> 可视化编程工具</p><p>不用写代码，通过拖拽连接节点就能创建游戏逻辑，就像用流程图做编程。</p><p><strong>核心优势：</strong></p><ul><li>无需编程基础</li><li>实时预览效果</li><li>适合设计师和美术使用</li><li>可以创建完整的游戏玩法</li></ul><hr><h2 id="项目管理概念" tabindex="-1"><a class="header-anchor" href="#项目管理概念"><span>项目管理概念</span></a></h2><h3 id="项目-project" tabindex="-1"><a class="header-anchor" href="#项目-project"><span>项目 (Project)</span></a></h3><p><strong>简单理解：</strong> 游戏的整个文件夹</p><p>项目包含了制作游戏所需的所有文件，包括模型、贴图、音频、代码等。</p><p><strong>文件结构：</strong></p><ul><li><code>.uproject</code> 文件：项目的身份证</li><li>Content 文件夹：存放游戏资源</li><li>与磁盘文件夹结构完全对应</li></ul><hr><h2 id="游戏对象概念" tabindex="-1"><a class="header-anchor" href="#游戏对象概念"><span>游戏对象概念</span></a></h2><h3 id="actor" tabindex="-1"><a class="header-anchor" href="#actor"><span>Actor</span></a></h3><p><strong>简单理解：</strong> 游戏世界中的&quot;演员&quot;</p><p>任何能放到游戏关卡中的物体都是 Actor，比如角色、道具、光源、摄像机等。</p><p><strong>基本特性：</strong></p><ul><li>可以移动、旋转、缩放</li><li>通过代码或蓝图控制</li><li>在 C++中对应 <code>AActor</code> 类</li></ul><h3 id="组件-component" tabindex="-1"><a class="header-anchor" href="#组件-component"><span>组件 (Component)</span></a></h3><p><strong>简单理解：</strong> 给 Actor 添加的功能模块</p><p>就像给手机装 APP 一样，组件为 Actor 添加特定功能。</p><p><strong>常见组件：</strong></p><ul><li>点光源组件：让 Actor 发光</li><li>音频组件：让 Actor 播放声音</li><li>移动组件：让 Actor 能够移动</li><li>组件必须附加到 Actor 上，不能独立存在</li></ul><h3 id="pawn" tabindex="-1"><a class="header-anchor" href="#pawn"><span>Pawn</span></a></h3><p><strong>简单理解：</strong> 可被控制的游戏角色</p><p>Pawn 是特殊的 Actor，代表游戏中的角色或载具，可以被玩家或 AI 控制。</p><p><strong>控制状态：</strong></p><ul><li><strong>被占有</strong>：正在被玩家或 AI 控制</li><li><strong>未被占有</strong>：没有被任何人控制</li></ul><h3 id="角色-character" tabindex="-1"><a class="header-anchor" href="#角色-character"><span>角色 (Character)</span></a></h3><p><strong>简单理解：</strong> 专门用作玩家的 Pawn</p><p>角色是 Pawn 的升级版，专门为玩家角色设计，内置了走路、跳跃等基本动作。</p><p><strong>内置功能：</strong></p><ul><li>碰撞检测</li><li>双足移动系统</li><li>输入响应系统</li></ul><h3 id="类型转换-casting" tabindex="-1"><a class="header-anchor" href="#类型转换-casting"><span>类型转换 (Casting)</span></a></h3><p><strong>简单理解：</strong> 确认物体的真实身份</p><p>就像问&quot;这个东西是不是苹果？&quot;如果是，就能使用苹果的特有功能（比如吃掉）。</p><p><strong>实际应用：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>玩家碰到体积 → 尝试转换为&quot;火焰体积&quot;</span></span>
<span class="line"><span>├─ 转换成功 → 扣血</span></span>
<span class="line"><span>└─ 转换失败 → 无事发生</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="控制器概念" tabindex="-1"><a class="header-anchor" href="#控制器概念"><span>控制器概念</span></a></h2><h3 id="玩家控制器-player-controller" tabindex="-1"><a class="header-anchor" href="#玩家控制器-player-controller"><span>玩家控制器 (Player Controller)</span></a></h3><p><strong>简单理解：</strong> 将玩家输入转化为游戏动作的翻译官</p><p>把你按下的键盘鼠标操作翻译成游戏中角色的移动、攻击等动作。</p><p><strong>重要特点：</strong></p><ul><li>每个玩家对应一个控制器</li><li>多人游戏中的网络通信枢纽</li><li>控制一个 Pawn 或角色</li></ul><h3 id="ai-控制器-ai-controller" tabindex="-1"><a class="header-anchor" href="#ai-控制器-ai-controller"><span>AI 控制器 (AI Controller)</span></a></h3><p><strong>简单理解：</strong> 电脑控制的&quot;虚拟玩家&quot;</p><p>让 NPC（非玩家角色）能够自动做出决策和行动，比如巡逻、攻击、逃跑等。</p><p><strong>默认行为：</strong></p><ul><li>除非被玩家控制器占有，否则 Pawn 会自动获得 AI 控制器</li></ul><hr><h2 id="游戏框架概念" tabindex="-1"><a class="header-anchor" href="#游戏框架概念"><span>游戏框架概念</span></a></h2><h3 id="玩家状态-player-state" tabindex="-1"><a class="header-anchor" href="#玩家状态-player-state"><span>玩家状态 (Player State)</span></a></h3><p><strong>简单理解：</strong> 玩家的游戏数据档案</p><p>记录玩家在游戏中的各种信息，比如等级、血量、分数等。</p><p><strong>包含信息：</strong></p><ul><li>玩家姓名</li><li>当前等级</li><li>血量值</li><li>游戏分数</li><li>特殊状态（如是否持有旗帜）</li></ul><p><strong>多人游戏特点：</strong></p><ul><li>所有玩家的状态在所有客户端都可见</li><li>自动同步数据保持一致性</li></ul><h3 id="游戏模式-game-mode" tabindex="-1"><a class="header-anchor" href="#游戏模式-game-mode"><span>游戏模式 (Game Mode)</span></a></h3><p><strong>简单理解：</strong> 游戏的规则制定者</p><p>定义这个游戏怎么玩，比如胜利条件、玩家数量限制、是否可以暂停等。</p><p><strong>设定内容：</strong></p><ul><li>玩家如何加入游戏</li><li>游戏是否可暂停</li><li>胜利/失败条件</li><li>特殊游戏规则</li></ul><p><strong>重要特点：</strong></p><ul><li>每个关卡只能有一个游戏模式</li><li>多人游戏中只存在于服务器</li><li>可以为不同关卡设置不同模式</li></ul><h3 id="游戏状态-game-state" tabindex="-1"><a class="header-anchor" href="#游戏状态-game-state"><span>游戏状态 (Game State)</span></a></h3><p><strong>简单理解：</strong> 游戏的实时信息板</p><p>包含需要让所有玩家都知道的游戏信息，比如比赛时间、团队分数等。</p><p><strong>包含信息：</strong></p><ul><li>游戏总分数</li><li>比赛是否开始</li><li>当前存活玩家数量</li><li>游戏时间</li></ul><p><strong>同步机制：</strong></p><ul><li>服务器维护主要数据</li><li>自动复制到所有客户端</li></ul><hr><h2 id="几何体概念" tabindex="-1"><a class="header-anchor" href="#几何体概念"><span>几何体概念</span></a></h2><h3 id="笔刷-brush" tabindex="-1"><a class="header-anchor" href="#笔刷-brush"><span>笔刷 (Brush)</span></a></h3><p><strong>简单理解：</strong> 快速搭建关卡的基础几何体</p><p>就像用积木块快速搭建房屋框架，适合制作关卡的基本结构。</p><p><strong>常见形状：</strong></p><ul><li>立方体</li><li>球体</li><li>圆柱体</li><li>自定义形状</li></ul><p><strong>使用场景：</strong></p><ul><li>快速关卡布局</li><li>测试关卡设计</li><li>简单几何体建模</li></ul><h3 id="体积-volumes" tabindex="-1"><a class="header-anchor" href="#体积-volumes"><span>体积 (Volumes)</span></a></h3><p><strong>简单理解：</strong> 看不见的功能区域</p><p>体积是有特殊功能的透明区域，玩家进入后会触发特定效果。</p><p><strong>常见类型：</strong></p><ul><li><strong>阻挡体积</strong>：阻止通过的隐形墙</li><li><strong>伤害体积</strong>：进入后持续扣血</li><li><strong>触发体积</strong>：进入/离开时触发事件</li><li><strong>水体积</strong>：模拟水下效果</li></ul><hr><h2 id="世界和关卡概念" tabindex="-1"><a class="header-anchor" href="#世界和关卡概念"><span>世界和关卡概念</span></a></h2><h3 id="关卡-level" tabindex="-1"><a class="header-anchor" href="#关卡-level"><span>关卡 (Level)</span></a></h3><p><strong>简单理解：</strong> 游戏的一个场景或地图</p><p>关卡是玩家实际游玩的区域，包含所有可见和可交互的内容。</p><p><strong>包含内容：</strong></p><ul><li>地形和建筑</li><li>角色和道具</li><li>光照和特效</li><li>音效和音乐</li></ul><p><strong>文件格式：</strong></p><ul><li>保存为 <code>.umap</code> 文件</li><li>有时也被称为&quot;地图&quot;</li></ul><h3 id="世界-world" tabindex="-1"><a class="header-anchor" href="#世界-world"><span>世界 (World)</span></a></h3><p><strong>简单理解：</strong> 游戏的大容器</p><p>世界包含游戏中的所有关卡，负责管理关卡之间的切换和加载。</p><p><strong>主要职责：</strong></p><ul><li>管理关卡加载和卸载</li><li>处理动态 Actor 的创建</li><li>协调多个关卡的运行</li></ul><hr><h2 id="快速查找表" tabindex="-1"><a class="header-anchor" href="#快速查找表"><span>快速查找表</span></a></h2><table><thead><tr><th>概念</th><th>简单理解</th><th>主要用途</th></tr></thead><tbody><tr><td>Object</td><td>基础砖块</td><td>所有元素的基础</td></tr><tr><td>Actor</td><td>游戏世界的演员</td><td>可放置的游戏对象</td></tr><tr><td>Pawn</td><td>可控制的角色</td><td>玩家/AI 控制的实体</td></tr><tr><td>Component</td><td>功能模块</td><td>为 Actor 添加功能</td></tr><tr><td>Blueprint</td><td>可视化编程</td><td>无代码创建游戏逻辑</td></tr><tr><td>Level</td><td>游戏场景</td><td>玩家游玩的区域</td></tr><tr><td>Game Mode</td><td>游戏规则</td><td>定义游戏怎么玩</td></tr></tbody></table><hr><h2 id="学习建议" tabindex="-1"><a class="header-anchor" href="#学习建议"><span>学习建议</span></a></h2><ol><li><strong>从基础开始</strong>：先理解 Object → Actor → Pawn 的层次关系</li><li><strong>实践体验</strong>：创建简单项目，亲手操作这些概念</li><li><strong>逐步深入</strong>：掌握基础后再学习复杂的游戏框架</li><li><strong>多看教程</strong>：结合官方文档和视频教程学习</li></ol><hr><p><em>本指南基于 Epic Games 官方文档整理，持续更新中...</em></p>`,125)]))}const p=t(s,[["render",i]]),h=JSON.parse('{"path":"/ue/e6x2l5uc/","title":"概念指南","lang":"zh-CN","frontmatter":{"title":"概念指南","createTime":"2025/06/05 03:22:19","permalink":"/ue/e6x2l5uc/"},"readingTime":{"minutes":6.34,"words":1903},"git":{"createdTime":1749065360000,"updatedTime":1749065360000,"contributors":[{"name":"kirineko","username":"kirineko","email":"kirineko@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kirineko?v=4","url":"https://github.com/kirineko"}]},"filePathRelative":"notes/ue/概念指南.md","headers":[]}');export{p as comp,h as data};
